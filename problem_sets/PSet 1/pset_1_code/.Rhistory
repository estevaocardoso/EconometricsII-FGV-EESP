# Cut historical series and align fitted values
gdp_ts_cut <- window(gdp_ts, start = cutoff_year)
fitted_cut <- fitted(fit)
fitted_cut <- tail(fitted_cut, length(gdp_ts_cut))
hist_df <- data.frame(
Year = as.integer(time(gdp_ts_cut)),
Value = as.numeric(gdp_ts_cut),
Fitted = as.numeric(fitted_cut)
)
forecast_df <- data.frame(
Year = as.integer(time(fc$mean)),
Forecast = as.numeric(fc$mean),
Lower = as.numeric(fc$lower[,2]),
Upper = as.numeric(fc$upper[,2])
)
# Define the total x-axis range: 30 years historical + 10 years forecast
x_min <- cutoff_year
x_max <- max(forecast_df$Year)
x_breaks <- seq(x_min, x_max, by = 5)
x_axis_theme <- if (i %in% last_row_indices) {
list(
scale_x_continuous(breaks = x_breaks, limits = c(x_min, x_max)),
theme(
axis.text.x = element_text(size = 7, angle = 90, vjust = 0.5, hjust = 1),
axis.ticks.x = element_line()
)
)
} else {
list(
scale_x_continuous(limits = c(x_min, x_max)),
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
)
}
forecast_plot <- ggplot() +
geom_line(data = hist_df, aes(x = Year, y = Value), color = "black") +
geom_line(data = hist_df, aes(x = Year, y = Fitted), color = "#C5240E", linetype = "dashed") +
geom_line(data = forecast_df, aes(x = Year, y = Forecast), color = "#559F52") +
geom_ribbon(data = forecast_df, aes(x = Year, ymin = Lower, ymax = Upper), fill = "#926590", alpha = 0.2) +
labs(title = paste("Forecast -", model_name),
x = "Year",
y = "GDP") +
theme_minimal() +
theme(
plot.title = element_text(size = 8, face = "bold"),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8)
) +
x_axis_theme
plots[[i]] <- forecast_plot
}
ggsave("forecast_10y_ahead.png",
plot = grid.arrange(grobs = plots, ncol = 2),
width = 10, height = 7, dpi = 300)
# Extract GDP and years
gdp <- pset_1_gdp$gdp
years <- pset_1_gdp$year
# Create time series
gdp_ts <- ts(gdp, start = min(years), frequency = 1)
# Define AR, MA, and ARMA models with various orders
models <- list(
AR1 = arima(gdp_ts, order = c(1, 0, 0)),
AR2 = arima(gdp_ts, order = c(2, 0, 0)),
MA1 = arima(gdp_ts, order = c(0, 0, 1)),
MA2 = arima(gdp_ts, order = c(0, 0, 2)),
ARMA11 = arima(gdp_ts, order = c(1, 0, 1)),
ARMA21 = arima(gdp_ts, order = c(2, 0, 1)),
ARMA12 = arima(gdp_ts, order = c(1, 0, 2)),
ARMA22 = arima(gdp_ts, order = c(2, 0, 2))
)
# Model names for titles
model_names <- c("AR(1)", "AR(2)", "MA(1)", "MA(2)",
"ARMA(1,1)", "ARMA(2,1)", "ARMA(1,2)", "ARMA(2,2)")
# Forecast horizon
h <- 10
# List to store plots
plots <- list()
# Indices of the last row in the 4x2 panel (to display x-axis labels)
last_row_indices <- c(7, 8)
# Loop through models to generate forecasts and plots
for (i in seq_along(models)) {
fit <- models[[i]]
model_name <- model_names[i]
fc <- forecast(fit, h = h)
# Last year of historical data
last_hist_year <- tail(time(gdp_ts), 1)
cutoff_year <- as.integer(last_hist_year) - 29  # last 30 years before forecast
# Cut historical series and align fitted values
gdp_ts_cut <- window(gdp_ts, start = cutoff_year)
fitted_cut <- fitted(fit)
fitted_cut <- tail(fitted_cut, length(gdp_ts_cut))
hist_df <- data.frame(
Year = as.integer(time(gdp_ts_cut)),
Value = as.numeric(gdp_ts_cut),
Fitted = as.numeric(fitted_cut)
)
forecast_df <- data.frame(
Year = as.integer(time(fc$mean)),
Forecast = as.numeric(fc$mean),
Lower = as.numeric(fc$lower[,2]),
Upper = as.numeric(fc$upper[,2])
)
# Define the total x-axis range: 30 years historical + 10 years forecast
x_min <- cutoff_year
x_max <- max(forecast_df$Year)
x_breaks <- seq(x_min, x_max, by = 5)
# Customize x-axis only for the last row of plots
x_axis_theme <- if (i %in% last_row_indices) {
list(
scale_x_continuous(breaks = x_breaks, limits = c(x_min, x_max)),
theme(
axis.text.x = element_text(size = 7, angle = 90, vjust = 0.5, hjust = 1),
axis.ticks.x = element_line()
)
)
} else {
list(
scale_x_continuous(limits = c(x_min, x_max)),
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
)
}
forecast_plot <- ggplot() +
geom_line(data = hist_df, aes(x = Year, y = Value), color = "black") +
geom_line(data = hist_df, aes(x = Year, y = Fitted), color = "#C5240E", linetype = "dashed") +
geom_line(data = forecast_df, aes(x = Year, y = Forecast), color = "#559F52") +
geom_ribbon(data = forecast_df, aes(x = Year, ymin = Lower, ymax = Upper), fill = "#926590", alpha = 0.2) +
labs(title = paste("Forecast -", model_name),
x = "Year",
y = "GDP") +
theme_minimal() +
theme(
plot.title = element_text(size = 8, face = "bold"),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8)
) +
x_axis_theme
plots[[i]] <- forecast_plot
}
# Save the panel plot to file
ggsave("forecast_10y_ahead.png",
plot = grid.arrange(grobs = plots, ncol = 2),
width = 10, height = 7, dpi = 300)
gdp <- pset_1_gdp$gdp
years <- pset_1_gdp$year
# Cria a série temporal
gdp_ts <- ts(gdp, start = min(years), frequency = 1)
# Define modelos AR, MA e ARMA com diferentes ordens
models <- list(
AR1 = arima(gdp_ts, order = c(1, 0, 0)),
AR2 = arima(gdp_ts, order = c(2, 0, 0)),
MA1 = arima(gdp_ts, order = c(0, 0, 1)),
MA2 = arima(gdp_ts, order = c(0, 0, 2)),
ARMA11 = arima(gdp_ts, order = c(1, 0, 1)),
ARMA21 = arima(gdp_ts, order = c(2, 0, 1)),
ARMA12 = arima(gdp_ts, order = c(1, 0, 2)),
ARMA22 = arima(gdp_ts, order = c(2, 0, 2))
)
# Define nomes dos modelos para título
model_names <- c("AR(1)", "AR(2)", "MA(1)", "MA(2)",
"ARMA(1,1)", "ARMA(2,1)", "ARMA(1,2)", "ARMA(2,2)")
# Previsão para 10 períodos à frente
h <- 10
# Lista para armazenar os gráficos
plots <- list()
# Índices das linhas do painel 4x2 que ficam na última linha (para exibir o eixo x)
last_row_indices <- c(7, 8)
# Loop pelos modelos para gerar forecasts e gráficos
for (i in seq_along(models)) {
fit <- models[[i]]
model_name <- model_names[i]
fc <- forecast(fit, h = h)
# Dados históricos com fitted
gdp_ts_cut <- window(gdp_ts, end = tail(time(gdp_ts), 1))
fitted_cut <- fitted(fit)
# Transforma o tempo em anos inteiros
hist_df <- data.frame(
Year = as.integer(floor(time(gdp_ts_cut))),
Value = as.numeric(gdp_ts_cut),
Fitted = as.numeric(fitted_cut)
)
forecast_df <- data.frame(
Year = as.integer(time(fc$mean)),
Forecast = as.numeric(fc$mean),
Lower = as.numeric(fc$lower[,2]),
Upper = as.numeric(fc$upper[,2])
)
x_breaks <- unique(c(seq(min(hist_df$Year), max(forecast_df$Year), by = 10), max(forecast_df$Year)))
# Customiza o eixo x apenas para os últimos gráficos da grade
x_axis_theme <- if (i %in% last_row_indices) {
list(
scale_x_continuous(breaks = x_breaks),
theme(
axis.text.x = element_text(size = 7),
axis.ticks.x = element_line()
)
)
} else {
list(
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
)
}
forecast_plot <- ggplot() +
geom_line(data = hist_df, aes(x = Year, y = Value), color = "black") +
geom_line(data = hist_df, aes(x = Year, y = Fitted), color = "#C5240E", linetype = "dashed") +
geom_line(data = forecast_df, aes(x = Year, y = Forecast), color = "#559F52") +
geom_ribbon(data = forecast_df, aes(x = Year, ymin = Lower, ymax = Upper), fill = "#926590", alpha = 0.2) +
labs(title = paste("Forecast -", model_name),
x = "Year",
y = "GDP") +
theme_minimal() +
theme(
plot.title = element_text(size = 8, face = "bold"),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)
) +
x_axis_theme
plots[[i]] <- forecast_plot
}
ggsave("forecast_10y_ahead.png",
plot = grid.arrange(grobs = plots, ncol = 2),
width = 10, height = 7, dpi = 300)
plots[[i]] <- forecast_plot
# Loop pelos modelos para gerar forecasts e gráficos
for (i in seq_along(models)) {
fit <- models[[i]]
model_name <- model_names[i]
fc <- forecast(fit, h = h)
# Último ano do histórico
last_hist_year <- tail(time(gdp_ts), 1)
cutoff_year <- as.integer(last_hist_year) - 29  # últimos 30 anos antes da previsão
# Dados históricos com fitted
gdp_ts_cut <- window(gdp_ts, start = cutoff_year)
fitted_cut <- fitted(fit)
fitted_cut <- tail(fitted_cut, length(gdp_ts_cut))  # alinha fitted com corte
hist_df <- data.frame(
Year = as.integer(time(gdp_ts_cut)),
Value = as.numeric(gdp_ts_cut),
Fitted = as.numeric(fitted_cut)
)
forecast_df <- data.frame(
Year = as.integer(time(fc$mean)),
Forecast = as.numeric(fc$mean),
Lower = as.numeric(fc$lower[,2]),
Upper = as.numeric(fc$upper[,2])
)
# Definindo o intervalo total: últimos 30 anos + 10 de previsão
x_min <- cutoff_year
x_max <- max(forecast_df$Year)
x_breaks <- seq(x_min, x_max, by = 5)
# Customiza o eixo x apenas para os gráficos da última linha
x_axis_theme <- if (i %in% last_row_indices) {
list(
scale_x_continuous(breaks = x_breaks, limits = c(x_min, x_max)),
theme(
axis.text.x = element_text(size = 7, angle = 90, vjust = 0.5, hjust = 1),
axis.ticks.x = element_line()
)
)
} else {
list(
scale_x_continuous(limits = c(x_min, x_max)),
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
)
}
forecast_plot <- ggplot() +
geom_line(data = hist_df, aes(x = Year, y = Value), color = "black") +
geom_line(data = hist_df, aes(x = Year, y = Fitted), color = "#C5240E", linetype = "dashed") +
geom_line(data = forecast_df, aes(x = Year, y = Forecast), color = "#559F52") +
geom_ribbon(data = forecast_df, aes(x = Year, ymin = Lower, ymax = Upper), fill = "#926590", alpha = 0.2) +
labs(title = paste("Forecast -", model_name),
x = "Year",
y = "GDP") +
theme_minimal() +
theme(
plot.title = element_text(size = 8, face = "bold"),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8)
) +
x_axis_theme
plots[[i]] <- forecast_plot
}
# Loop pelos modelos para gerar forecasts e gráficos
for (i in seq_along(models)) {
fit <- models[[i]]
model_name <- model_names[i]
fc <- forecast(fit, h = h)
# Último ano do histórico
last_hist_year <- tail(time(gdp_ts), 1)
cutoff_year <- as.integer(last_hist_year) - 29  # últimos 30 anos antes da previsão
# Dados históricos com fitted
gdp_ts_cut <- window(gdp_ts, start = cutoff_year)
fitted_cut <- fitted(fit)
fitted_cut <- tail(fitted_cut, length(gdp_ts_cut))  # alinha fitted com corte
hist_df <- data.frame(
Year = as.integer(time(gdp_ts_cut)),
Value = as.numeric(gdp_ts_cut),
Fitted = as.numeric(fitted_cut)
)
forecast_df <- data.frame(
Year = as.integer(time(fc$mean)),
Forecast = as.numeric(fc$mean),
Lower = as.numeric(fc$lower[,2]),
Upper = as.numeric(fc$upper[,2])
)
# Definindo o intervalo total: últimos 30 anos + 10 de previsão
x_min <- cutoff_year
x_max <- max(forecast_df$Year)
x_breaks <- seq(x_min, x_max, by = 5)
# Customiza o eixo x apenas para os gráficos da última linha
x_axis_theme <- if (i %in% last_row_indices) {
list(
scale_x_continuous(breaks = x_breaks, limits = c(x_min, x_max)),
theme(
axis.text.x = element_text(size = 7, angle = 90, vjust = 0.5, hjust = 1),
axis.ticks.x = element_line()
)
)
} else {
list(
scale_x_continuous(limits = c(x_min, x_max)),
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
)
}
forecast_plot <- ggplot() +
geom_line(data = hist_df, aes(x = Year, y = Value), color = "black") +
geom_line(data = hist_df, aes(x = Year, y = Fitted), color = "#C5240E", linetype = "dashed") +
geom_line(data = forecast_df, aes(x = Year, y = Forecast), color = "#559F52") +
geom_ribbon(data = forecast_df, aes(x = Year, ymin = Lower, ymax = Upper), fill = "#926590", alpha = 0.2) +
labs(title = paste("Forecast -", model_name),
x = "Year",
y = "GDP") +
theme_minimal() +
theme(
plot.title = element_text(size = 8, face = "bold"),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8)
) +
x_axis_theme
plots[[i]] <- forecast_plot
}
ggsave("forecast_10y_ahead.png",
plot = grid.arrange(grobs = plots, ncol = 2),
width = 10, height = 7, dpi = 300)
# Loop pelos modelos para gerar forecasts e gráficos
for (i in seq_along(models)) {
fit <- models[[i]]
model_name <- model_names[i]
fc <- forecast(fit, h = h)
# Último ano do histórico
last_hist_year <- tail(time(gdp_ts), 1)
cutoff_year <- as.integer(last_hist_year) - 29  # últimos 30 anos antes da previsão
# Dados históricos com fitted
gdp_ts_cut <- window(gdp_ts, start = cutoff_year)
fitted_cut <- fitted(fit)
fitted_cut <- tail(fitted_cut, length(gdp_ts_cut))  # alinha fitted com corte
hist_df <- data.frame(
Year = as.integer(time(gdp_ts_cut)),
Value = as.numeric(gdp_ts_cut),
Fitted = as.numeric(fitted_cut)
)
forecast_df <- data.frame(
Year = as.integer(time(fc$mean)),
Forecast = as.numeric(fc$mean),
Lower = as.numeric(fc$lower[,2]),
Upper = as.numeric(fc$upper[,2])
)
# Definindo o intervalo total: últimos 30 anos + 10 de previsão
x_min <- cutoff_year
x_max <- max(forecast_df$Year)
x_breaks <- unique(c(seq(min(hist_df$Year), max(forecast_df$Year), by = 10), max(forecast_df$Year)))
# Customiza o eixo x apenas para os gráficos da última linha
x_axis_theme <- if (i %in% last_row_indices) {
list(
scale_x_continuous(breaks = x_breaks, limits = c(x_min, x_max)),
theme(
axis.text.x = element_text(size = 7, angle = 90, vjust = 0.5, hjust = 1),
axis.ticks.x = element_line()
)
)
} else {
list(
scale_x_continuous(limits = c(x_min, x_max)),
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
)
}
forecast_plot <- ggplot() +
geom_line(data = hist_df, aes(x = Year, y = Value), color = "black") +
geom_line(data = hist_df, aes(x = Year, y = Fitted), color = "#C5240E", linetype = "dashed") +
geom_line(data = forecast_df, aes(x = Year, y = Forecast), color = "#559F52") +
geom_ribbon(data = forecast_df, aes(x = Year, ymin = Lower, ymax = Upper), fill = "#926590", alpha = 0.2) +
labs(title = paste("Forecast -", model_name),
x = "Year",
y = "GDP") +
theme_minimal() +
theme(
plot.title = element_text(size = 8, face = "bold"),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8)
) +
x_axis_theme
plots[[i]] <- forecast_plot
}
ggsave("forecast_10y_ahead.png",
plot = grid.arrange(grobs = plots, ncol = 2),
width = 10, height = 7, dpi = 300)
gdp <- pset_1_gdp$gdp
years <- pset_1_gdp$year
# Create the time series
gdp_ts <- ts(gdp, start = min(years), frequency = 1)
# Define AR, MA, and ARMA models with different orders
models <- list(
AR1 = arima(gdp_ts, order = c(1, 0, 0)),
AR2 = arima(gdp_ts, order = c(2, 0, 0)),
MA1 = arima(gdp_ts, order = c(0, 0, 1)),
MA2 = arima(gdp_ts, order = c(0, 0, 2)),
ARMA11 = arima(gdp_ts, order = c(1, 0, 1)),
ARMA21 = arima(gdp_ts, order = c(2, 0, 1)),
ARMA12 = arima(gdp_ts, order = c(1, 0, 2)),
ARMA22 = arima(gdp_ts, order = c(2, 0, 2))
)
# Define model names for titles
model_names <- c("AR(1)", "AR(2)", "MA(1)", "MA(2)",
"ARMA(1,1)", "ARMA(2,1)", "ARMA(1,2)", "ARMA(2,2)")
# Forecast for 10 periods ahead
h <- 10
# List to store the plots
plots <- list()
# Indices of the 4x2 panel rows that are on the last line (to show the x-axis)
last_row_indices <- c(7, 8)
# Loop through the models to generate forecasts and plots
for (i in seq_along(models)) {
fit <- models[[i]]
model_name <- model_names[i]
fc <- forecast(fit, h = h)
# Last year of historical data
last_hist_year <- tail(time(gdp_ts), 1)
cutoff_year <- as.integer(last_hist_year) - 29  # last 30 years before the forecast
# Historical data with fitted values
gdp_ts_cut <- window(gdp_ts, start = cutoff_year)
fitted_cut <- fitted(fit)
fitted_cut <- tail(fitted_cut, length(gdp_ts_cut))  # align fitted with cut series
hist_df <- data.frame(
Year = as.integer(time(gdp_ts_cut)),
Value = as.numeric(gdp_ts_cut),
Fitted = as.numeric(fitted_cut)
)
forecast_df <- data.frame(
Year = as.integer(time(fc$mean)),
Forecast = as.numeric(fc$mean),
Lower = as.numeric(fc$lower[,2]),
Upper = as.numeric(fc$upper[,2])
)
# Define total range: last 30 years + 10 years forecast
x_min <- cutoff_year
x_max <- max(forecast_df$Year)
x_breaks <- unique(c(seq(min(hist_df$Year), max(forecast_df$Year), by = 10), max(forecast_df$Year)))
# Customize x-axis only for the plots in the last row
x_axis_theme <- if (i %in% last_row_indices) {
list(
scale_x_continuous(breaks = x_breaks, limits = c(x_min, x_max)),
theme(
axis.text.x = element_text(size = 7, angle = 90, vjust = 0.5, hjust = 1),
axis.ticks.x = element_line()
)
)
} else {
list(
scale_x_continuous(limits = c(x_min, x_max)),
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank()
)
)
}
forecast_plot <- ggplot() +
geom_line(data = hist_df, aes(x = Year, y = Value), color = "black") +
geom_line(data = hist_df, aes(x = Year, y = Fitted), color = "#C5240E", linetype = "dashed") +
geom_line(data = forecast_df, aes(x = Year, y = Forecast), color = "#559F52") +
geom_ribbon(data = forecast_df, aes(x = Year, ymin = Lower, ymax = Upper), fill = "#926590", alpha = 0.2) +
labs(title = paste("Forecast -", model_name),
x = "Year",
y = "GDP") +
theme_minimal() +
theme(
plot.title = element_text(size = 8, face = "bold"),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8)
) +
x_axis_theme
plots[[i]] <- forecast_plot
}
ggsave("forecast_10y_ahead.png",
plot = grid.arrange(grobs = plots, ncol = 2),
width = 10, height = 7, dpi = 300)
