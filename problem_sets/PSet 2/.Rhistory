df <- corn_production_land_us
head(df)
df_us <- df %>%
filter(Entity == "United States", Year >= 1950, Year <= 2021) %>%
select(Year, production = `Corn production (tonnes)`) %>%
drop_na()
serie_ts <- ts(df_us$production, start = 1950, end = 2021, frequency = 1)
plot(serie_ts, main = "Produção de Milho nos EUA (1950–2021)", ylab = "Toneladas", xlab = "Ano")
teste_adf <- ur.df(serie_ts, type = "trend", lags = 4)
summary(teste_adf)
df_plot <- data.frame(
Ano = as.numeric(time(serie_ts)),
Producao = as.numeric(serie_ts)
)
ggplot(df_plot, aes(x = Ano, y = Producao)) +
geom_line(color = "#1f78b4", size = 1.2) +
labs(
title = "Produção de Milho nos EUA (1950–2021)",
x = "Ano",
y = "Toneladas"
) +
theme_bw() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.position = "none"
)
ggplot(df_plot, aes(x = Ano, y = Producao / 1e6)) +
geom_line(color = "#1f78b4", size = 1.2) +
labs(
title = "Produção de Milho nos EUA (1950–2021)",
x = "Ano",
y = "Toneladas (milhões)"
) +
scale_y_continuous(labels = label_number(accuracy = 0.1)) +  # mostra com 1 casa decimal
theme_bw() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.position = "none"
)
# Exibir o gráfico
print(p_producao)
ggsave("usc_crop_df.png", plot = p_producao, height = 6, width = 10, dpi = 300)
p_producao<-ggplot(df_plot, aes(x = Ano, y = Producao / 1e6)) +
geom_line(color = "#1f78b4", size = 1.2) +
labs(
title = "Produção de Milho nos EUA (1950–2021)",
x = "Ano",
y = "Toneladas (milhões)"
) +
scale_y_continuous(labels = label_number(accuracy = 0.1)) +  # mostra com 1 casa decimal
theme_bw() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.position = "none"
)
print(p_producao)
ggsave("usc_crop_df.png", plot = p_producao, height = 6, width = 10, dpi = 300)
p_production <- ggplot(df_plot, aes(x = Year, y = Production / 1e6)) +
geom_line(color = "#1f78b4", size = 1.2) +
labs(
title = "Corn Production in the U.S. (1950–2021)",
x = "Year",
y = "Production (millions of tonnes)"
) +
scale_y_continuous(labels = label_number(accuracy = 0.1)) +  # display with one decimal place
theme_bw() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.position = "none"
)
ggsave("us_corn_production.png", plot = p_production, height = 6, width = 10, dpi = 300)
# Create the plot with y-axis in millions
p_production <- ggplot(df_plot, aes(x = Year, y = Production / 1e6)) +
geom_line(color = "#1f78b4", size = 1.2) +
labs(
title = "Corn Production in the U.S. (1950–2021)",
x = "Year",
y = "Production (millions of tonnes)"
) +
scale_y_continuous(labels = label_number(accuracy = 0.1)) +  # display with one decimal place
theme_bw() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.position = "none"
)
# Save the plot
ggsave("us_corn_production.png", plot = p_production, height = 6, width = 10, dpi = 300)
df_plot <- data.frame(
Year = as.numeric(time(serie_ts)),
Production = as.numeric(serie_ts)
)
# Create the plot with y-axis in millions
p_production <- ggplot(df_plot, aes(x = Year, y = Production / 1e6)) +
geom_line(color = "#1f78b4", size = 1.2) +
labs(
title = "Corn Production in the U.S. (1950–2021)",
x = "Year",
y = "Production (millions of tonnes)"
) +
scale_y_continuous(labels = label_number(accuracy = 0.1)) +  # display with one decimal place
theme_bw() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.position = "none"
)
# Save the plot
ggsave("us_corn_production.png", plot = p_production, height = 6, width = 10, dpi = 300)
library(MetBrewer)
library(forecast)
library(dplyr)
library(tidyr)
library(tibble)
library(xtable)
library(ggplot2)
library(gridExtra)
library(tseries)
library(quantmod)
library(doParallel)
library(gganimate)
library(transformr)
library(tictoc)
library(urca)
library(lmtest)
library(car)
library(lpdensity)
library(kableExtra)
library(stargazer)
library(modelsummary)
library(glue)
library(scales)
library(geomtextpath)
df_us <- df %>%
filter(Entity == "United States", Year >= 1950, Year <= 2021) %>%
select(Year, production = `Corn production (tonnes)`) %>%
drop_na()
serie_ts <- ts(df_us$production, start = 1950, end = 2021, frequency = 1)
teste_adf <- ur.df(serie_ts, type = "trend", lags = 4)
df_plot <- data.frame(
Year = as.numeric(time(serie_ts)),
Production = as.numeric(serie_ts)
)
# Create the plot with y-axis in millions
p_production <- ggplot(df_plot, aes(x = Year, y = Production / 1e6)) +
geom_line(color = "#1f78b4", size = 1.2) +
labs(
title = "Corn Production in the U.S. (1950–2021)",
x = "Year",
y = "Production (millions of tonnes)"
) +
scale_y_continuous(labels = label_number(accuracy = 0.1)) +  # display with one decimal place
theme_bw() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.position = "none"
)
summary(teste_adf)
results_adf <- summary(teste_adf)
print(xtable(result_df))
results_adf <- summary(teste_adf)
# Create a data frame with the key test results
result_df <- data.frame(
"Test Statistic" = results_adf@teststat[1],
"Critical Value 1%" = results_adf@cval[1,1],
"Critical Value 5%" = results_adf@cval[1,2],
"Critical Value 10%" = results_adf@cval[1,3],
"Lags" = results_adf@lags,
check.names = FALSE
)
library(urca)
teste_adf <- ur.df(serie_ts, type = "trend", lags = 4)
results_adf <- summary(teste_adf)
# Create a data frame with the key test results
result_df <- data.frame(
"Test Statistic" = results_adf@teststat[1],
"Critical Value 1%" = results_adf@cval[1,1],
"Critical Value 5%" = results_adf@cval[1,2],
"Critical Value 10%" = results_adf@cval[1,3],
"Lags" = results_adf@lags,
check.names = FALSE
)
library(MetBrewer)
library(forecast)
library(dplyr)
library(tidyr)
library(tibble)
library(xtable)
library(ggplot2)
library(gridExtra)
library(tseries)
library(quantmod)
library(doParallel)
library(gganimate)
library(transformr)
library(tictoc)
library(urca)
library(lmtest)
library(car)
library(lpdensity)
library(kableExtra)
library(stargazer)
library(modelsummary)
library(glue)
library(scales)
library(geomtextpath)
df_us <- df %>%
filter(Entity == "United States", Year >= 1950, Year <= 2021) %>%
select(Year, production = `Corn production (tonnes)`) %>%
drop_na()
serie_ts <- ts(df_us$production, start = 1950, end = 2021, frequency = 1)
teste_adf <- ur.df(serie_ts, type = "trend", lags = 4)
results_adf <- summary(teste_adf)
# Create a data frame with the key test results
result_df <- data.frame(
"Test Statistic" = results_adf@teststat[1],
"Critical Value 1%" = results_adf@cval[1,1],
"Critical Value 5%" = results_adf@cval[1,2],
"Critical Value 10%" = results_adf@cval[1,3],
"Lags" = results_adf@lags,
check.names = FALSE
)
results_adf
head(df_us)
colnames(df)
df_us <- df %>%
filter(Entity == "United States", Year >= 1950, Year <= 2021) %>%
select(Year, production = `Corn production (tonnes)`,
area = `Corn, area harvested (hectares)`) %>%
drop_na()
colnames(df_us)
head(df_us)
# Create the plot with y-axis in millions
p_production <- ggplot(df_plot, aes(x = Year, y = production / 1e6)) +
geom_line(color = "#1f78b4", size = 1) +
labs(
title = "Corn Production in the U.S. (1950–2021)",
x = "Year",
y = "Production (millions of tonnes)"
) +
scale_y_continuous(labels = label_number(accuracy = 0.1)) +
theme_bw() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.position = "none"
)
ggsave("us_corn_production.png", plot = p_production, height = 6, width = 10, dpi = 300)
# Create the plot with y-axis in millions
p_production <- ggplot(df_plot, aes(x = Year, y = production / 1e6)) +
geom_line(color = "#1f78b4", size = 1) +
labs(
title = "Corn Production in the U.S. (1950–2021)",
x = "Year",
y = "Production (millions of tonnes)"
) +
scale_y_continuous(labels = label_number(accuracy = 0.1)) +
theme_bw() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.position = "none"
)
ggsave("us_corn_production.png", plot = p_production, height = 6, width = 10, dpi = 300)
df_us <- df %>%
filter(Entity == "United States", Year >= 1950, Year <= 2021) %>%
select(Year, production = `Corn production (tonnes)`,
area = `Corn, area harvested (hectares)`) %>%
drop_na()
head(df_us)
# Create the plot with y-axis in millions
p_production <- ggplot(df_us, aes(x = Year, y = production / 1e6)) +
geom_line(color = "#1f78b4", size = 1) +
labs(
title = "Corn Production in the U.S. (1950–2021)",
x = "Year",
y = "Production (millions of tonnes)"
) +
scale_y_continuous(labels = label_number(accuracy = 0.1)) +
theme_bw() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.position = "none"
)
ggsave("us_corn_production.png", plot = p_production, height = 6, width = 10, dpi = 300)
# Create the plot with y-axis in millions
p_production <- ggplot(df_us, aes(x = Year, y = production / 1e6)) +
geom_line(color = "#1f78b4", size = 1) +
labs(
#title = "Corn Production in the U.S. (1950–2021)",
x = "Year",
y = "Production (millions of tonnes)"
) +
scale_y_continuous(labels = label_number(accuracy = 0.1)) +
theme_bw() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.position = "none"
)
ggsave("us_corn_production.png", plot = p_production, height = 6, width = 10, dpi = 300)
# Gráfico da área cultivada de milho
p_area <- ggplot(df_us, aes(x = Year, y = area / 1e6)) +
geom_line(color = "#FF4040", size = 1) +
labs(
title = "Corn Cultivated Area in the U.S. (1950–2021)",
x = "Year",
y = "Area (millions of hectares)"
) +
scale_y_continuous(labels = label_number(accuracy = 0.1)) +
theme_bw() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.position = "none"
)
ggsave("us_corn_area.png", plot = p_area, height = 6, width = 10, dpi = 300)
# Gráfico da área cultivada de milho
p_area <- ggplot(df_us, aes(x = Year, y = area / 1e6)) +
geom_line(color = "#FF4040", size = 1) +
labs(
#title = "Corn Cultivated Area in the U.S. (1950–2021)",
x = "Year",
y = "Area (millions of hectares)"
) +
scale_y_continuous(labels = label_number(accuracy = 0.1)) +
theme_bw() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.position = "none"
)
ggsave("us_corn_area.png", plot = p_area, height = 6, width = 10, dpi = 300)
serie_ts <- ts(df_us$production, start = 1950, end = 2021, frequency = 1)
teste_adf <- ur.df(serie_ts, type = "trend", lags = 4)
results_adf <- summary(teste_adf)
results_adf
results_adf
test_stat <- results_adf@teststat["tau3"]
crit_vals <- results_adf@cval["tau3", ]
df_ADF <- data.frame(
Statistic = round(test_stat, 4),
`1%` = crit_vals["1pct"],
`5%` = crit_vals["5pct"],
`10%` = crit_vals["10pct"]
) %>%
tibble::rownames_to_column(var = "Test")
# Ajustar nome da linha
df_ADF$Test <- "tau3"
# Para imprimir e usar com xtable:
print(df_ADF)
results_adf[1]
results_adf
results_adf[3]
View(results_adf)
results_adf
max_lags <- 8
bic_values <- numeric(max_lags + 1)
for (lag in 0:max_lags) {
adf_test <- ur.df(serie_ts, type = "trend", lags = lag, selectlags = "Fixed")
bic_values[lag + 1] <- BIC(adf_test@testreg)
}
max_lags <- 8
bic_values[lag + 1] <- BIC(adf_test@testreg)
bic_values <- numeric(max_lags + 1)
for (lag in 0:max_lags) {
adf_test <- ur.df(serie_ts, type = "trend", lags = lag, selectlags = "Fixed")
bic_values[lag + 1] <- BIC(adf_test@testreg)
}
for (lag in 0:max_lags) {
adf_test <- ur.df(serie_ts, type = "trend", lags = lag, selectlags = "Fixed")
sum_reg <- summary(adf_test@testreg)
sigma2 <- sum_reg$sigma^2              # variance of \varepislon_t
k <- length(coef(adf_test@testreg))   # n of parameters
n <- length(adf_test@testreg$residuals)  # n sample
bic_values[lag + 1] <- log(sigma2) + (k * log(n)) / n
}
for (lag in 0:max_lags) {
adf_test <- ur.df(serie_ts, type = "trend", lags = lag, selectlags = "Fixed")
# Objeto de regressão do teste
model <- adf_test@testreg
# Estimativa da variância dos resíduos (sigma^2 = RSS / df)
sigma2 <- deviance(model) / model$df.residual
# Número de parâmetros estimados
k <- length(coef(model))
# Tamanho da amostra (n)
n <- length(model$residuals)
# Cálculo manual do BIC
bic_values[lag + 1] <- log(sigma2) + (k * log(n)) / n
}
# Vetor para armazenar os BICs
bic_values <- rep(NA, max_lags + 1)
# Loop sobre os lags
for (lag in 0:max_lags) {
cat("Calculando para lag =", lag, "\n")
adf_test <- tryCatch({
ur.df(serie_ts, type = "trend", lags = lag, selectlags = "Fixed")
}, error = function(e) {
cat("Erro ao rodar ur.df para lag =", lag, ":", e$message, "\n")
return(NULL)
})
if (is.null(adf_test)) next  # pular para o próximo lag se houve erro
model <- adf_test@testreg
# Verificações de segurança
if (is.null(model) || is.null(deviance(model)) || is.null(model$df.residual) || model$df.residual == 0) {
cat("Modelo inválido para lag =", lag, "\n")
next
}
# Calcular sigma²
sigma2 <- deviance(model) / model$df.residual
# Validar sigma2
if (is.na(sigma2) || sigma2 <= 0) {
cat("Valor inválido de sigma² para lag =", lag, "\n")
next
}
# Número de parâmetros
k <- length(coef(model))
# Número de observações
n <- length(model$residuals)
# Calcular BIC
bic <- log(sigma2) + (k * log(n)) / n
bic_values[lag + 1] <- bic
}
adf_test <- ur.df(serie_ts, type = "trend", lags = 0)
str(adf_test@testreg)
bic_values <- rep(NA, max_lags + 1)
for (lag in 0:max_lags) {
cat("Calculando para lag =", lag, "\n")
adf_test <- tryCatch({
ur.df(serie_ts, type = "trend", lags = lag, selectlags = "Fixed")
}, error = function(e) {
cat("Erro ao rodar ur.df para lag =", lag, ":", e$message, "\n")
return(NULL)
})
if (is.null(adf_test)) next
model <- adf_test@testreg  # Esse é um objeto lm válido
# Validar estrutura
if (is.null(model) || is.null(deviance(model)) || is.null(model$df.residual) || model$df.residual == 0) {
cat("Modelo inválido para lag =", lag, "\n")
next
}
sigma2 <- deviance(model) / model$df.residual
if (is.na(sigma2) || sigma2 <= 0) {
cat("Valor inválido de sigma² para lag =", lag, "\n")
next
}
k <- length(coef(model))
n <- length(model$residuals)
bic_values[lag + 1] <- log(sigma2) + (k * log(n)) / n
}
y <- df_us$production
n <- length(y)
max_lags <- 8
bic_values <- numeric(max_lags + 1)
# Loop manual por número de defasagens
for (p in 0:max_lags) {
cat("Calculando para lag =", p, "\n")
# Criar defasagens
y_diff <- diff(y)
y_lag1 <- y[1:(n - 1)]
trend <- 2:n  # Começa em 2 porque perdemos a 1ª obs com diff()
# Variáveis defasadas
X <- cbind(y_lag1, trend)
if (p > 0) {
for (i in 1:p) {
lagged_diff <- c(rep(NA, i), diff(y)[1:(length(y_diff) - i)])
X <- cbind(X, lagged_diff)
}
}
# Remover NAs
valid_rows <- complete.cases(X)
X <- X[valid_rows, ]
y_model <- y_diff[valid_rows]
# Estimar modelo
model <- lm(y_model ~ X)
# Calcular BIC
sigma2 <- deviance(model) / model$df.residual
k <- length(coef(model))
n_model <- length(model$residuals)
bic_values[p + 1] <- log(sigma2) + (k * log(n_model)) / n_model
}
# Criar data frame de saída
bic_df <- tibble(
lags = 0:max_lags,
BIC = bic_values
)
print(bic_df)
# Melhor número de defasagens
best_lag <- which.min(bic_df$BIC) - 1
cat("Melhor número de lags segundo BIC:", best_lag, "\n")
teste_adf_auto <- ur.df(serie_ts, type = "trend", selectlags = "BIC")
summary(teste_adf_auto)
library(doParallel)
