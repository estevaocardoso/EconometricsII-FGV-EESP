Critical_1pct = round(crit_vals[, "1pct"], 4),
Critical_5pct = round(crit_vals[, "5pct"], 4),
Critical_10pct = round(crit_vals[, "10pct"], 4),
stringsAsFactors = FALSE
)
return(df)
}
full_adf_table <- rbind(
get_full_adf_stats(test_Y1_exr, "Exchange Rate"),
get_full_adf_stats(test_Y2_ipca, "Brazil IPCA"),
get_full_adf_stats(test_Y3_cpi, "US CPI")
)
print(full_adf_table)
print(xtable(full_adf_table))
print(xtable(full_adf_table))
View(full_adf_table)
print(xtable(full_adf_table), digits = c(0, 0, 0, 4, 4, 4, 4))
print(xtable(full_adf_table), digits =4)
xtable(full_adf_table)
summary(test_Y1_exr)
summary(test_Y2_ipca)
summary(test_Y3_cpi)
xtable(full_adf_table)
zt_plot <- ggplot(zt_data, aes(x = date)) +
geom_line(aes(y = z_t, color = "z_t"), size = 1) +
labs(
x = "Date",
y = expression(z[t]),
color = "Series"
) +
theme_minimal() +
theme(legend.position = "bottom") +
scale_color_manual(
values = c("z_t" = "#800000"),  # Vinho escuro, elegante
labels = c("z_t" = expression(z[t]))
)
# Exporta imagem com mesmo padr達o de qualidade
ggsave(
filename = "zt_series_plot.png",
plot = zt_plot,
width = 10,
height = 6,
dpi = 300
)
zt_plot <- ggplot(zt_data, aes(x = date)) +
geom_line(aes(y = z_t, color = "z_t"), size = 1) +
labs(
x = "Date",
y = expression(z[t]),
color = "Serie"
) +
theme_minimal() +
theme(legend.position = "bottom") +
scale_color_manual(
values = c("z_t" = "#800000"),  # Vinho escuro, elegante
labels = c("z_t" = expression(z[t]))
)
# Exporta imagem com mesmo padr達o de qualidade
ggsave(
filename = "zt_series_plot.png",
plot = zt_plot,
width = 10,
height = 6,
dpi = 300
)
View(zt_data)
#we need to combine both dataframes to get the cointegrated variable
zt_data <- brazil_data_flt %>%
dplyr::select(date, log_change_exchange, log_change_ipca) %>%
left_join(
usa_data_flt %>% dplyr::select(date, log_change_us_cpi),
by = "date"
)
zt_data <- zt_data %>%
mutate(
z_t =  log_change_ipca - log_change_exchange - log_change_us_cpi
)
zt_ts <- ts(zt_data$z_t, start = c(1995, 1), frequency = 12)
zt_ts <- log_change_exchange_ts - log_change_ipca_ts - log_change_us_cpi_ts
#creating a new dataframe to store the serie because there was a problem with the dates
zt_data <- data.frame(
date = seq(as.Date("1995-01-01"), as.Date("2019-12-01"), by = "month"),
log_change_exchange = log_change_exchange_ts,
log_change_ipca = log_change_ipca_ts,
log_change_us_cpi = log_change_us_cpi_ts,
z_t = zt_ts
)
zt_plot <- ggplot(zt_data, aes(x = date)) +
geom_line(aes(y = z_t, color = "z_t"), size = 1) +
labs(
x = "Date",
y = expression(z[t]),
color = "Serie"
) +
theme_minimal() +
theme(legend.position = "bottom") +
scale_color_manual(
values = c("z_t" = "#800000"),  # Vinho escuro, elegante
labels = c("z_t" = expression(z[t]))
)
# Exporta imagem com mesmo padr達o de qualidade
ggsave(
filename = "zt_series_plot.png",
plot = zt_plot,
width = 10,
height = 6,
dpi = 300
)
zt_ts <-  log_change_ipca_ts - log_change_exchange_ts - log_change_us_cpi_ts
#creating a new dataframe to store the serie because there was a problem with the dates
zt_data <- data.frame(
date = seq(as.Date("1995-01-01"), as.Date("2019-12-01"), by = "month"),
log_change_exchange = log_change_exchange_ts,
log_change_ipca = log_change_ipca_ts,
log_change_us_cpi = log_change_us_cpi_ts,
z_t = zt_ts
)
zt_plot <- ggplot(zt_data, aes(x = date)) +
geom_line(aes(y = z_t, color = "z_t"), size = 1) +
labs(
x = "Date",
y = expression(z[t]),
color = "Serie"
) +
theme_minimal() +
theme(legend.position = "bottom") +
scale_color_manual(
values = c("z_t" = "#800000"),  # Vinho escuro, elegante
labels = c("z_t" = expression(z[t]))
)
# Exporta imagem com mesmo padr達o de qualidade
ggsave(
filename = "zt_series_plot.png",
plot = zt_plot,
width = 10,
height = 6,
dpi = 300
)
library(MetBrewer)
library(forecast)
library(dplyr)
library(tidyr)
library(tibble)
library(xtable)
library(ggplot2)
library(gridExtra)
library(tseries)
library(quantmod)
library(doParallel)
library(gganimate)
library(transformr)
library(tictoc)
library(urca)
library(lmtest)
library(car)
library(lpdensity)
library(kableExtra)
library(stargazer)
library(modelsummary)
library(glue)
library(boot)
library(scales)
library(geomtextpath)
library(broom)
library(patchwork)
library(vars)
adf_zt <- ur.df(zt_data$z_t, type = "trend", selectlags = "BIC")
summary(adf_zt)
zttable <- rbind(
get_full_adf_stats(adf_zt, "Cointegrated $Z_t$"),
)
zttable <- get_full_adf_stats(adf_zt, "Cointegrated $Z_t$")
xtable(zttable)
adf_zt <- ur.df(zt_data$z_t, type = "drift", selectlags = "BIC")
summary(adf_zt)
zttable <- get_full_adf_stats(adf_zt, "Cointegrated $Z_t$")
xtable(zttable)
library(MetBrewer)
library(forecast)
library(dplyr)
library(tidyr)
library(tibble)
library(xtable)
library(ggplot2)
library(gridExtra)
library(tseries)
library(quantmod)
library(doParallel)
library(gganimate)
library(transformr)
library(tictoc)
library(urca)
library(lmtest)
library(car)
library(lpdensity)
library(kableExtra)
library(stargazer)
library(modelsummary)
library(glue)
library(boot)
library(scales)
library(geomtextpath)
library(broom)
library(patchwork)
library(vars)
Y1_ts <- brazil_ts[, 1]
Y2_ts <- brazil_ts[, 2]
Y3_ts <- usa_ts
# Teste ADF para Exchange Rate
test_Y1_exr <- ur.df(Y1_ts, type = "drift", selectlags = "BIC")
# Teste ADF para IPCA Index
test_Y2_ipca <- ur.df(Y2_ts, type = "trend", selectlags = "BIC")
# Teste ADF para US CPI Index
test_Y3_cpi <- ur.df(Y3_ts, type = "trend", selectlags = "BIC")
# Resultados
summary(test_Y1_exr)
# Resultados
summary(test_Y1_exr)
summary(test_Y2_ipca)
df <- data.frame(
Y1_ts = Y1_ts,
Y2_ts = Y2_ts,
Y3_ts = Y3_ts
)
#running a ols
unknown_zt <- lm(Y1_ts ~ Y2_ts + Y3_ts, data = df)
summary(unknown_zt)
xtable(unknown_zt)
#getting the residuals
resid_zt <- residuals(unknown_zt)
#testing wiht ADF
adf.test(residuos)
#testing wiht ADF
adf.test(resid_zt)
summary(resid_zt)
#plotting a graph for the residuals
resid_data <- data.frame(
date = zt_data$date,
resid_zt = resid_zt
)
ggplot(resid_data, aes(x = date)) +
geom_line(aes(y = resid_zt, color = "resid_zt"), size = 1) +
labs(
x = "Date",
y = expression(hat(u)[t]),
color = "Series"
) +
theme_minimal() +
theme(legend.position = "bottom") +
scale_color_manual(
values = c("resid_zt" = "#455000"),
labels = c("resid_zt" = expression(hat(u)[t]))
)
PO_test_serie <- cbind(
exchange_rate = log_change_exchange_ts,
ipca_index = log_change_ipca_ts,
us_cpi_index = log_change_us_cpi_ts
)
PO_test_serie <- cbind(
exchange_rate = Y1_ts,
ipca_index = Y2_ts,
us_cpi_index = Y3_ts
)
po_test <- ca.po(PO_test_serie, demean = "const", type = "Pu")
summary(po_test)
PO_test_table <- get_full_adf_stats(po_test, "PO Test")
xtable(PO_test_table)
#running OLS
alt1_model <- lm(Y1_ts ~ Y2_ts + Y3_ts, data = df)
summary(alt1_model)
xtable(alt1_model)
#getting residuals
alt1_resid <- residuals(alt1_model)
#ADF test on residuals
adf.test(alt1_resid)
#potting residuals
alt1_resid_data <- data.frame(
date = df$date,
alt1_resid = alt1_resid
)
#phillips-Ouliaris Test for first alternative ordering
PO_test_alt1 <- cbind(
ipca_index = Y1_ts,
exchange_rate = Y2_ts,
us_cpi_index = Y3_ts
)
po_alt1 <- ca.po(PO_test_alt1, demean = "const", type = "Pu")
summary(po_alt1)
#phillips-Ouliaris Test for first alternative ordering
PO_test_alt1 <- cbind(
ipca_index = Y2_ts,
exchange_rate = Y1_ts,
us_cpi_index = Y3_ts
)
po_alt1 <- ca.po(PO_test_alt1, demean = "const", type = "Pu")
summary(po_alt1)
#running OLS
alt2_model <- lm(Y3_ts ~ Y1_ts + Y2_ts, data = df)
summary(alt2_model)
xtable(alt2_model)
#phillips-Ouliaris Test for second alternative ordering
PO_test_alt2 <- cbind(
us_cpi_index = Y3_ts,
exchange_rate = Y1_ts,
ipca_index = Y2_ts
)
po_alt2 <- ca.po(PO_test_alt2, demean = "const", type = "Pu")
summary(po_alt2)
po_alt2 <- ca.po(PO_test_alt2, demean = "const", type = "Pu")
summary(po_alt2)
df_level <- data.frame(
date = seq(as.Date("1995-01-01"), as.Date("2019-12-01"), by = "month")
Y1_ts = Y1_ts,
df_level <- data.frame(
date = seq(as.Date("1995-01-01"), as.Date("2019-12-01"), by = "month"),
Y1_ts = Y1_ts,
Y2_ts = Y2_ts,
Y3_ts = Y3_ts
)
#running a ols
unknown_zt <- lm(Y1_ts ~ Y2_ts + Y3_ts, data = df)
summary(unknown_zt)
xtable(unknown_zt)
#running a ols
unknown_zt <- lm(Y1_ts ~ Y2_ts + Y3_ts, data = df)
summary(unknown_zt)
xtable(unknown_zt)
#getting the residuals
resid_zt <- residuals(unknown_zt)
#testing wiht ADF
adf.test(resid_zt)
summary(resid_zt)
#plotting a graph for the residuals
resid_data <- data.frame(
date = df_level$date,
resid_zt = resid_zt
)
resid_plot <- ggplot(resid_data, aes(x = date)) +
geom_line(aes(y = resid_zt, color = "resid_zt"), size = 1) +
labs(
x = "Date",
y = expression(hat(u)[t]),
color = "Series"
) +
theme_minimal() +
theme(legend.position = "bottom") +
scale_color_manual(
values = c("resid_zt" = "#455000"),
labels = c("resid_zt" = expression(hat(u)[t]))
)
ggsave(
filename = "residuals_st_plot.png",
plot = resid_plot,
width = 10,
height = 6,
dpi = 300
)
Y1_ts_level <- brazil_ts[, 1]
Y2_ts_level <- brazil_ts[, 2]
Y3_ts_level <- usa_ts
df_level <- data.frame(
date = seq(as.Date("1995-01-01"), as.Date("2019-12-01"), by = "month"),
Y1_ts = Y1_ts_level,
Y2_ts = Y2_ts_level,
Y3_ts = Y3_ts_level
)
#running a ols
unknown_zt <- lm(Y1_ts ~ Y2_ts + Y3_ts, data = df)
summary(unknown_zt)
xtable(unknown_zt)
#getting the residuals
resid_zt <- residuals(unknown_zt)
#testing wiht ADF
adf.test(resid_zt)
summary(resid_zt)
#plotting a graph for the residuals
resid_data <- data.frame(
date = df_level$date,
resid_zt = resid_zt
)
resid_plot <- ggplot(resid_data, aes(x = date)) +
geom_line(aes(y = resid_zt, color = "resid_zt"), size = 1) +
labs(
x = "Date",
y = expression(hat(u)[t]),
color = "Series"
) +
theme_minimal() +
theme(legend.position = "bottom") +
scale_color_manual(
values = c("resid_zt" = "#455000"),
labels = c("resid_zt" = expression(hat(u)[t]))
)
ggsave(
filename = "residuals_st_plot.png",
plot = resid_plot,
width = 10,
height = 6,
dpi = 300
)
PO_test_serie <- cbind(
exchange_rate = Y1_ts,
ipca_index = Y2_ts,
us_cpi_index = Y3_ts
)
po_test <- ca.po(PO_test_serie, demean = "const", type = "Pu")
summary(po_test)
PO_test_table <- get_full_adf_stats(po_test, "PO Test")
xtable(PO_test_table)
#running OLS
alt1_model <- lm(Y2_ts ~ Y1_ts + Y3_ts, data = df_level)
summary(alt1_model)
xtable(alt1_model)
#getting residuals
alt1_resid <- residuals(alt1_model)
#ADF test on residuals
adf.test(alt1_resid)
#potting residuals
alt1_resid_data <- data.frame(
date = df_level$date,
alt1_resid = alt1_resid
)
alt1_plot <- ggplot(alt1_resid_data, aes(x = date)) +
geom_line(aes(y = alt1_resid, color = "alt1_resid"), size = 1) +
labs(
x = "Date",
y = expression(hat(u)[t]),
color = "Series"
) +
theme_minimal() +
theme(legend.position = "bottom") +
scale_color_manual(
values = c("alt1_resid" = "#1A73E8"),
labels = c("alt1_resid" = expression(hat(u)[t]))
)
ggsave(
filename = "residuals_alt1_plot.png",
plot = alt1_plot,
width = 10,
height = 6,
dpi = 300
)
#phillips-Ouliaris Test for first alternative ordering
PO_test_alt1 <- cbind(
ipca_index = Y2_ts,
exchange_rate = Y1_ts,
us_cpi_index = Y3_ts
)
po_alt1 <- ca.po(PO_test_alt1, demean = "const", type = "Pu")
summary(po_alt1)
#running OLS
alt2_model <- lm(Y3_ts ~ Y1_ts + Y2_ts, data = df)
summary(alt2_model)
#running OLS
alt2_model <- lm(Y3_ts ~ Y1_ts + Y2_ts, data = df_level)
summary(alt2_model)
xtable(alt2_model)
#getting residuals
alt2_resid <- residuals(alt2_model)
#ADF test on residuals
adf.test(alt2_resid)
#plotting residuals
alt2_resid_data <- data.frame(
date = df_level$date,
alt2_resid = alt2_resid
)
alt2_plot <- ggplot(alt2_resid_data, aes(x = date)) +
geom_line(aes(y = alt2_resid, color = "alt2_resid"), size = 1) +
labs(
x = "Date",
y = expression(hat(u)[t]),
color = "Series"
) +
theme_minimal() +
theme(legend.position = "bottom") +
scale_color_manual(
values = c("alt2_resid" = "#D93025"),  # vermelho elegante
labels = c("alt2_resid" = expression(hat(u)[t]))
)
ggsave(
filename = "residuals_alt2_plot.png",
plot = alt2_plot,
width = 10,
height = 6,
dpi = 300
)
#phillips-Ouliaris Test for second alternative ordering
PO_test_alt2 <- cbind(
us_cpi_index = Y3_ts,
exchange_rate = Y1_ts,
ipca_index = Y2_ts
)
po_alt2 <- ca.po(PO_test_alt2, demean = "const", type = "Pu")
summary(po_alt2)
PO_test_alt_table <- rbind(
get_full_adf_stats(po_alt1, "Brazil IPCA"),
get_full_adf_stats(po_alt2, "USA CPI")
)
xtable(PO_test_alt_table)
johansen_data <- cbind(
exchange_rate = Y1_ts_level,
ipca_index = Y2_ts_level,
us_cpi_index = Y3_ts_level
)
VARselect(johansen_data, lag.max = 12, type = "none")
johansen_test <- ca.jo(
johansen_data,
type = "eigen",
ecdet = "none",
K = 12
)
summary(johansen_test)
