daily_returns_selic_2021 <- daily_returns_selic_2021[2:nrow(daily_returns_selic_2021)
View(daily_returns_selic_2021)
daily_returns_selic_2021 <- daily_returns_selic_2021[2:nrow(daily_returns_selic_2021)]
View(daily_returns_selic_2021)
daily_returns_selic_2021 <- daily_returns_selic_2021[2:nrow(daily_returns_selic_2021), ]
View(daily_returns_selic_2021)
excess_returns <- daily_returns_selic_2021 %>%
transmute(
Date = Date,
Market_Excess = bvsp_r - selic_daily,
Excess_ABEV3 = abev3_r - selic_daily,
Excess_BBDC3 = bbdc3_r - selic_daily,
Excess_ITUB3 = itub3_r - selic_daily
)
View(bvsp_r)
excess_returns <- daily_returns_selic_2021 %>%
transmute(
Date = Date,
Market_Excess = bvsp_r$r_bvsp - selic_daily$Return_Selic,
Excess_ABEV3 = abev3_r$r_abev3 - selic_daily$Return_Selic,
Excess_BBDC3 = bbdc3_r$r_bbdc3 - selic_daily$Return_Selic,
Excess_ITUB3 = itub3_r$r_itub3 - selic_daily$Return_Selic
)
excess_returns <- daily_returns_selic_2021 %>%
transmute(
date = Date,
Market_Excess = r_bvsp - Return_Selic,
Excess_ABEV3 = r_abev3 - Return_Selic,
Excess_BBDC3 = r_bbdc3 - Return_Selic,
Excess_ITUB3 = r_itub3 - Return_Selic
)
View(excess_returns)
df_capm <- excess_returns
gmm_capm <- gmm(
g = as.matrix(df_capm %>% select(starts_with("R_"))) ~ df_capm$`Rm-Rf`,
x = df_capm$`Rm-Rf`
)
gmm_capm <- gmm(
g = as.matrix(df_capm %>% dplyr::select(starts_with("R_"))) ~ df_capm$`Rm-Rf`,
x = df_capm$`Rm-Rf`
)
df_capm <- excess_returns %>%
mutate(`Rm-Rf` = Market_Excess,
`R_ABEV-Rf` = Excess_ABEV3,
`R_BBDC-Rf` = Excess_BBDC3,
`R_ITUB-Rf` = Excess_ITUB3) %>%
dplyr::select(date, `Rm-Rf`, starts_with("R_"))
gmm_capm <- gmm(
g = as.matrix(df_capm %>% dplyr::select(starts_with("R_"))) ~ df_capm$`Rm-Rf`,
x = df_capm$`Rm-Rf`
)
View(df_capm)
str(df_capm)
anyNA(df_capm)
gmm_capm <- gmm(
g = as.matrix(df_capm %>% dplyr::select(`R_ABEV-Rf`, `R_BBDC-Rf`, `R_ITUB-Rf`)),
x = df_capm$`Rm-Rf`,
t0 = c(0.1, 0.1, 0.1)  # chute inicial, ajuste conforme seu modelo
)
moment_function <- function(theta, data) {
R <- data[,1:3]  # retornos excess de ativos (3 ativos)
RmRf <- data[,4] # retorno excess do mercado
# Modelo linear simples: R - alpha - beta * RmRf = 0
residuals <- R - matrix(theta[1:3], nrow=nrow(R), ncol=3, byrow=TRUE) - outer(RmRf, theta[4:6])
# Momentos: multiplicar residuals por instrumentos (usando RmRf como instrumento)
moment <- residuals * RmRf
# retornamos momentos médios
colMeans(moment)
}
# Organize os dados para a função
data_gmm <- cbind(
df_capm %>% dplyr::select(`R_ABEV-Rf`, `R_BBDC-Rf`, `R_ITUB-Rf`) %>% as.matrix(),
df_capm$`Rm-Rf`
)
# Estimativa inicial
start_theta <- rep(0.1, 6)
gmm_fit <- gmm(
g = moment_function,
x = data_gmm,
t0 = start_theta
)
df_capm$date <- as.Date(df_capm$date , format = "%d/%m/%Y")
gmm_capm <- gmm(
g = as.matrix(df_capm %>% dplyr::select(starts_with("R_"))) ~ df_capm$`Rm-Rf`,
x = df_capm$`Rm-Rf`
)
gmm_capm <- gmm(
g = as.matrix(df_capm_sem_date %>% dplyr::select(starts_with("R_"))) ~ df_capm_sem_date$`Rm-Rf`,
x = df_capm_sem_date$`Rm-Rf`
)
df_capm_sem_date <- df_capm %>% dplyr::select(-date)
gmm_capm <- gmm(
g = as.matrix(df_capm_sem_date %>% dplyr::select(starts_with("R_"))) ~ df_capm_sem_date$`Rm-Rf`,
x = df_capm_sem_date$`Rm-Rf`
)
moment_capm <- function(theta, data) {
alpha <- theta[1]
beta <- theta[2]
Ri <- data[, 1]   # retorno excessivo do ativo
Rm <- data[, 2]   # retorno excessivo do mercado
m1 <- Ri - alpha - beta * Rm
m2 <- m1 * Rm
cbind(m1, m2)
}
data_abev <- as.matrix(df_capm %>% dplyr::select(R_ABEV_Rf, Rm_Rf))
df_capm <- excess_returns %>%
mutate(
`Rm_Rf` = Market_Excess,
`R_ABEV_Rf` = Excess_ABEV3,
`R_BBDC_Rf` = Excess_BBDC3,
`R_ITUB_Rf` = Excess_ITUB3
) %>%
dplyr::select(Rm_Rf, R_ABEV_Rf, R_BBDC_Rf, R_ITUB_Rf) %>%
na.omit()
moment_capm <- function(theta, data) {
alpha <- theta[1]
beta <- theta[2]
Ri <- data[, 1]   # retorno excessivo do ativo
Rm <- data[, 2]   # retorno excessivo do mercado
m1 <- Ri - alpha - beta * Rm
m2 <- m1 * Rm
cbind(m1, m2)
}
data_abev <- as.matrix(df_capm %>% dplyr::select(R_ABEV_Rf, Rm_Rf))
start_theta <- c(0, 1)  # chute inicial alpha=0, beta=1
gmm_abev <- gmm(g = moment_capm, x = data_abev, t0 = start_theta)
summary(gmm_abev)
df_capm <- excess_returns %>%
mutate(`Rm-Rf` = Market_Excess,
`R_ABEV-Rf` = Excess_ABEV3,
`R_BBDC-Rf` = Excess_BBDC3,
`R_ITUB-Rf` = Excess_ITUB3) %>%
dplyr::select(date, `Rm-Rf`, starts_with("R_"))
data_abev <- as.matrix(df_capm %>% dplyr::select(R_ABEV_Rf, Rm_Rf))
df_capm <- excess_returns %>%
mutate(
`Rm_Rf` = Market_Excess,
`R_ABEV_Rf` = Excess_ABEV3,
`R_BBDC_Rf` = Excess_BBDC3,
`R_ITUB_Rf` = Excess_ITUB3
) %>%
dplyr::select(Rm_Rf, R_ABEV_Rf, R_BBDC_Rf, R_ITUB_Rf) %>%
na.omit()
View(df_capm)
moment_capm <- function(theta, data) {
alpha <- theta[1]
beta <- theta[2]
Ri <- data[, 1]   # retorno excessivo do ativo
Rm <- data[, 2]   # retorno excessivo do mercado
m1 <- Ri - alpha - beta * Rm
m2 <- m1 * Rm
cbind(m1, m2)
}
data_abev <- as.matrix(df_capm %>% dplyr::select(R_ABEV_Rf, Rm_Rf))
start_theta <- c(0, 1)  # chute inicial alpha=0, beta=1
gmm_abev <- gmm(g = moment_capm, x = data_abev, t0 = start_theta)
data_abev <- apply(data_abev, 2, as.numeric)
df_capm <- df_capm %>% drop_na()
mm_abev <- gmm(g = moment_capm, x = data_abev, t0 = start_theta, vcov = "iid")
summary(gmm_abev)
df_capm <- df_capm %>%
mutate(across(everything(), as.numeric)) %>%
drop_na()
# Matriz para GMM
data_abev <- as.matrix(df_capm %>% dplyr::select(R_ABEV_Rf, Rm_Rf))
# Função momentos (alpha, beta)
moment_capm <- function(theta, data) {
alpha <- theta[1]
beta <- theta[2]
Ri <- data[, 1]
Rm <- data[, 2]
m1 <- Ri - alpha - beta * Rm
m2 <- m1 * Rm
cbind(m1, m2)
}
start_theta <- c(0, 1)
gmm_abev <- gmm(g = moment_capm, x = data_abev, t0 = start_theta, vcov = "iid")
summary(gmm_abev)
# Reading stock data
df_abev3 <- read_csv("data/ABEV3.csv", sep = "/")
# Reading stock data
df_abev3 <- read_csv("data/ABEV3.csv", sep = "/")
# Reading stock data
df_abev3 <-read_csv("data/ABEV3.csv")
df_bbdc3 <-read_csv("data/BBDC3.csv")
df_itub3 <-read_csv("data/ITUB3.csv")
# Reading indexes
df_bvsp <- read_csv("data/ABEV3.csv")
df_selic <- read_csv("data/selic.csv")
# Stock and BVSP have similar structures; Selic is a mess, but it is because
# we have the wrong delimiter and the wrong decimal points
df_selic <- read_delim(paste(str_data_directory, "selic.csv", sep = "/"),
delim = ";",
locale = locale(decimal_mark = ",", grouping_mark = "."))
# Stock and BVSP have similar structures; Selic is a mess, but it is because
# we have the wrong delimiter and the wrong decimal points
df_selic <-read_delim("data/selic.csv", delim = ";",
locale = locale(decimal_mark = ","),
trim_ws = TRUE)
## a. Stock Returns ------------------------------------------------------------
# Joining all stock data
df_stock <- list(df_abev3, df_bbdc3, df_itub3, df_bvsp) %>%
reduce(left_join, by = 'Date') %>%
dplyr::select(Date, starts_with("Close")) %>%
rename(Close_ABEV = Close.x,
Close_BBDC = Close.y,
Close_ITUB = Close.x.x,
Close_BVSP = Close.y.y)
# Calculating daily % returns
df_stock %<>%
mutate(across(starts_with("Close_"),
~ 100*(. / lag(.) - 1),
.names = "Return_{col}"))
## b. Selic --------------------------------------------------------------------
# readr reads the date column as character
str(df_selic)
str(df_stock)
# Changing column type to date
df_selic$Data <- as.Date(df_selic$Data, format = "%d/%m/%Y")
# Selecting relevant columns: Date and Daily Factor
df_selic %<>%
dplyr::select(Data, `Fator diário`) %>%
rename(Date = Data,
Daily_Factor = `Fator diário`)
# The daily factor is just (1 + return), so we can write
df_selic %<>%
mutate(Return_Selic = 100 * (Daily_Factor - 1))
# To check if we did things right
(1 + df_selic[1, 3] / 100)^252 - 1 # REALLY close to the annual value of 9.15%
# Joining with stock data: as stock only has 2021 data, we don't need to subset
df <- left_join(df_stock, df_selic, by = 'Date')
# Keeping only returns
df %<>%
dplyr::select(Date, starts_with("Return"))
# Ignoring the first row (has NAs)
df <- df[2:nrow(df), ]
## c. Creating Variables -------------------------------------------------------
# We will create the variables using the actual names of them
df_capm <- df %>%
mutate(`Rm-Rf` = Return_Close_BVSP - Return_Selic,
`R_ABEV-Rf` = Return_Close_ABEV - Return_Selic,
`R_BBDC-Rf` = Return_Close_BBDC - Return_Selic,
`R_ITUB-Rf` = Return_Close_ITUB - Return_Selic) %>%
dplyr::select(Date, `Rm-Rf`, starts_with("R_"))
## d. CAPM Models --------------------------------------------------------------
# To estimate everything at once (need to so that we can perform a joint
# hypothesis test), we follow Chaussé (2021) and use a matrix to aggregate
# everything into one object
gmm_capm <- gmm(
g = as.matrix(df_capm %>% select(starts_with("R_"))) ~ df_capm$`Rm-Rf`,
x = df_capm$`Rm-Rf`
)
## d. CAPM Models --------------------------------------------------------------
# To estimate everything at once (need to so that we can perform a joint
# hypothesis test), we follow Chaussé (2021) and use a matrix to aggregate
# everything into one object
gmm_capm <- gmm(
g = as.matrix(df_capm %>% dplyr::select(starts_with("R_"))) ~ df_capm$`Rm-Rf`,
x = df_capm$`Rm-Rf`
)
# Results
summary(gmm_capm)
## d. CAPM Models --------------------------------------------------------------
# To estimate everything at once (need to so that we can perform a joint
# hypothesis test), we follow Chaussé (2021) and use a matrix to aggregate
# everything into one object
gmm_capm <- gmm(
g = as.matrix(df_capm %>% dplyr::select(starts_with("R_"))) ~ df_capm$`Rm-Rf`,
x = df_capm$`Rm-Rf`
)
View(df_capm)
## d. CAPM Models --------------------------------------------------------------
# To estimate everything at once (need to so that we can perform a joint
# hypothesis test), we follow Chaussé (2021) and use a matrix to aggregate
# everything into one object
gmm_capm <- gmm(
g = df_capm$`R_ABEV-Rf` ~ df_capm$`Rm-Rf`,
x = df_capm$`Rm-Rf`
)
## d. CAPM Models --------------------------------------------------------------
# To estimate everything at once (need to so that we can perform a joint
# hypothesis test), we follow Chaussé (2021) and use a matrix to aggregate
# everything into one object
gmm_capm <- gmm(
g = as.matrix(df_capm %>% dplyr::select(starts_with("R_"))) ~ df_capm$Rm-Rf,
x = df_capm$Rm-Rf
)
## d. CAPM Models --------------------------------------------------------------
# To estimate everything at once (need to so that we can perform a joint
# hypothesis test), we follow Chaussé (2021) and use a matrix to aggregate
# everything into one object
gmm_capm <- gmm(
g = as.matrix(df_capm %>% dplyr::select(starts_with("R_"))) ~ df_capm$`Rm-Rf`,
x = df_capm$`Rm-Rf`
)
moment_capm <- function(theta, data) {
alpha <- theta[1]
beta  <- theta[2]
Ri_Rf <- data[, 1]  # Excesso de retorno da ação
Rm_Rf <- data[, 2]  # Excesso de retorno do mercado
m1 <- Ri_Rf - alpha - beta * Rm_Rf             # Restrição dos resíduos
m2 <- m1 * 1                                   # Momento com constante
m3 <- m1 * Rm_Rf                               # Momento com o fator de mercado
cbind(m2, m3)                                  # Vetor de momentos
}
data_abev <- df_capm %>%
dplyr::select(`R_ABEV-Rf`, `Rm-Rf`) %>%
as.matrix()
start_theta <- c(0, 0)
gmm_abev <- gmm(
g = moment_capm,
x = data_abev,
t0 = start_theta
)
summary(gmm_abev)
data_bbdc <- df_capm %>%
dplyr::select(`R_BBDC-Rf`, `Rm-Rf`) %>%
as.matrix()
gmm_bbdc <- gmm(
g = moment_capm,
x = data_bbdc,
t0 = start_theta
)
summary(gmm_bbdc)
summary(gmm_bbdc)
data_itub <- df_capm %>%
dplyr::select(`R_ITUB-Rf`, `Rm-Rf`) %>%
as.matrix()
gmm_itub <- gmm(
g = moment_capm,
x = data_itub,
t0 = start_theta
)
summary(gmm_itub)
library(texreg)
install.packages("texreg")
library(texreg)
createTexreg.gmm <- function(gmm_obj, model.name = "GMM Model") {
coefs <- coef(gmm_obj)
se <- sqrt(diag(vcov(gmm_obj)))
pvalues <- 2 * (1 - pnorm(abs(coefs / se)))  # p-valores aproximados via z
texreg::createTexreg(
coef.names = names(coefs),
coef = coefs,
se = se,
pvalues = pvalues,
model.name = model.name
)
}
gmm_abev_texreg <- createTexreg.gmm(gmm_abev, model.name = "ABEV3")
gmm_bbdc_texreg <- createTexreg.gmm(gmm_bbdc, model.name = "BBDC3")
gmm_itub_texreg <- createTexreg.gmm(gmm_itub, model.name = "ITUB3")
screenreg(
list(gmm_abev_texreg, gmm_bbdc_texreg, gmm_itub_texreg),
digits = 4,
stars = c(0.01, 0.05, 0.1)
)
summary(gmm_itub, gmm_bbdc)
stargazer(gmm_itub, gmm_bbdc)
stargazer(gmm_itub, gmm_bbdc, gmm_abev)
df_capm <- excess_returns %>%
mutate(`Rm-Rf` = Return_Close_BVSP - Return_Selic,
`R_ABEV-Rf` = Return_Close_ABEV - Return_Selic,
`R_BBDC-Rf` = Return_Close_BBDC - Return_Selic,
`R_ITUB-Rf` = Return_Close_ITUB - Return_Selic) %>%
dplyr::select(Date, `Rm-Rf`, starts_with("R_"))
excess_returns <- daily_returns_selic_2021 %>%
transmute(
date = Date,
Market_Excess = r_bvsp - Return_Selic,
Excess_ABEV3 = r_abev3 - Return_Selic,
Excess_BBDC3 = r_bbdc3 - Return_Selic,
Excess_ITUB3 = r_itub3 - Return_Selic
)
excess_returns <- daily_returns_selic_2021 %>%
transmute(
date = Date,
Market_Excess = r_bvsp - Return_Selic,
Excess_ABEV3 = r_abev3 - Return_Selic,
Excess_BBDC3 = r_bbdc3 - Return_Selic,
Excess_ITUB3 = r_itub3 - Return_Selic
)
df_capm <- excess_returns %>%
mutate(`Rm-Rf` = r_bvsp - Return_Selic,
`R_ABEV-Rf` = r_abev3 - Return_Selic,
`R_BBDC-Rf` = r_bbdc3 - Return_Selic,
`R_ITUB-Rf` = r_itub3 - Return_Selic) %>%
dplyr::select(Date, `Rm-Rf`, starts_with("R_"))
df_capm <- excess_returns %>%
mutate(`Rm-Rf` = Market_Excess,
`R_ABEV-Rf` =Excess_ABEV3,
`R_BBDC-Rf` = Excess_BBDC3,
`R_ITUB-Rf` = Excess_ITUB3) %>%
dplyr::select(Date, `Rm-Rf`, starts_with("R_"))
df_capm <- excess_returns %>%
mutate(`Rm-Rf` = Market_Excess,
`R_ABEV-Rf` =Excess_ABEV3,
`R_BBDC-Rf` = Excess_BBDC3,
`R_ITUB-Rf` = Excess_ITUB3) %>%
dplyr::select(date, `Rm-Rf`, starts_with("R_"))
moment_capm <- function(theta, data) {
alpha <- theta[1]
beta  <- theta[2]
Ri_Rf <- data[, 1]
Rm_Rf <- data[, 2]
m1 <- Ri_Rf - alpha - beta * Rm_Rf
m2 <- m1 * 1
m3 <- m1 * Rm_Rf
cbind(m2, m3)
}
#model gmm for abev
data_abev <- df_capm %>%
dplyr::select(`R_ABEV-Rf`, `Rm-Rf`) %>%
as.matrix()
start_theta <- c(0, 0)
gmm_abev <- gmm(
g = moment_capm,
x = data_abev,
t0 = start_theta
)
summary(gmm_abev)
#model gmm for bbdc
data_bbdc <- df_capm %>%
dplyr::select(`R_BBDC-Rf`, `Rm-Rf`) %>%
as.matrix()
gmm_bbdc <- gmm(
g = moment_capm,
x = data_bbdc,
t0 = start_theta
)
summary(gmm_bbdc)
#model gmm for itub
data_itub <- df_capm %>%
dplyr::select(`R_ITUB-Rf`, `Rm-Rf`) %>%
as.matrix()
gmm_itub <- gmm(
g = moment_capm,
x = data_itub,
t0 = start_theta
)
summary(gmm_itub)
stargazer(gmm_itub, gmm_bbdc, gmm_abev)
summary(gmm_itub)
stargazer(gmm_itub, gmm_bbdc, gmm_abev)
moment_capm_joint <- function(theta, data) {
# Separar os parâmetros
alpha1 <- theta[1]
beta1  <- theta[2]
alpha2 <- theta[3]
beta2  <- theta[4]
alpha3 <- theta[5]
beta3  <- theta[6]
# Separar os dados
Ri1_Rf <- data[, 1]  # ABEV3 excess return
Ri2_Rf <- data[, 2]  # BBDC3 excess return
Ri3_Rf <- data[, 3]  # ITUB3 excess return
Rm_Rf  <- data[, 4]  # Market excess return
# Moment conditions for each asset
m1 <- (Ri1_Rf - alpha1 - beta1 * Rm_Rf)
m2 <- m1 * 1
m3 <- m1 * Rm_Rf
m4 <- (Ri2_Rf - alpha2 - beta2 * Rm_Rf)
m5 <- m4 * 1
m6 <- m4 * Rm_Rf
m7 <- (Ri3_Rf - alpha3 - beta3 * Rm_Rf)
m8 <- m7 * 1
m9 <- m7 * Rm_Rf
cbind(m2, m3, m5, m6, m8, m9)
}
data_joint <- df_capm %>%
dplyr::select(`R_ABEV-Rf`, `R_BBDC-Rf`, `R_ITUB-Rf`, `Rm-Rf`) %>%
as.matrix()
start_theta_joint <- c(0, 0, 0, 0, 0, 0)  # starting values: all zeros
gmm_joint <- gmm(
g = moment_capm_joint,
x = data_joint,
t0 = start_theta_joint
)
summary(gmm_joint)
summary(gmm_joint)
R_mat <- matrix(0, nrow = 3, ncol = 6)
R_mat[1, 1] <- 1  # Restrição sobre alpha1 (posição 1)
R_mat[2, 3] <- 1  # Restrição sobre alpha2 (posição 3)
R_mat[3, 5] <- 1  # Restrição sobre alpha3 (posição 5)
q_vec <- c(0, 0, 0)
# Teste de hipótese
linearHypothesis(gmm_joint, R_mat, q_vec, test = "Chisq")
n_restrictions <- 3
R_capm <- cbind(diag(n_restrictions),
matrix(0, nrow = n_restrictions, ncol = n_restrictions))
# Create the vector of null values
theta_null <- rep(0, n_restrictions)
# Test the null hypothesis of interest
print(linearHypothesis(
model = gmm_joint,
hypothesis.matrix = R_capm,
rhs = theta_null,
test = "Chisq"
))
gmm_joint <- gmm(
g = moment_capm_joint,
x = data_joint,
t0 = start_theta_joint
)
summary(gmm_joint)
# Test the null hypothesis of interest
print(linearHypothesis(
model = gmm_joint,
hypothesis.matrix = R_capm,
rhs = theta_null,
test = "Chisq"
))
